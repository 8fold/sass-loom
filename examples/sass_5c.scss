/**
 * Using Sass map to improve code consolidation by removing CSS syntax.
 *
 * Sass file size: 9kb | ~400 lines
 *
 * CSS files sizes (in kilobytes):
 *
 * - Minified + compressed: 2
 * - Minified: 5
 * - Uncompressed: 6
 *
 */

@use "sass:map"; // needed to interact with maps
@use "sass:list"; // needed to interact with lists
@use "sass:meta"; // neededd to get programmatic details

// function to retrieve a single member value of the map given for vars
@function valueAtMember($member, $vars) {
    @if meta.type-of($member) == "number" {
      @return list.nth($vars, $member);

    }
    @return map.get($vars, $member);
}

// function to retrieve a value at a variable depth within the map given for vars
@function valueAtPath($varPath, $vars) {
  $value: ();
  $first: true;
  @each $part in $varPath {
    @if $first {
      $value: valueAtMember($part, $vars);
      $first: false;

    } @else {
      $value: valueAtMember($part, $value);

    }
  }
  @return $value;
}

@function font-size($multiplierForMin: 1, $multiplierForMax: 1) {
  $min:  map.get($variables, "fonts", "size", "min");
  $minS: map.get($variables, "screens", "size", "min");

  $minP: $min * $multiplierForMin;
  $maxP: $min * $multiplierForMax;

  $proportion: $minP / $minS * 100;

  @return clamp(#{$minP}pt, #{$proportion}vw, #{$maxP}pt)
}

// mixin for generating the CSS content defining a CSS variable at the location
// defined by varPath, which is a list of keys to the desired value.
@mixin variable($varName, $varPath) {
  $value: ();

  @if meta.type-of($varPath) != "list" {
    $value: $varPath;

  } @else {
    $value: valueAtPath($varPath, $variables);

  }
  --#{$varName}: #{$value};
}

$variables: (
  "screens": (
    "size": (
      "min": 320
    )
  ),

  "fonts": (
    "size": (
      "min": 10
    ),
    "families": (
      "header": '"Montserrat", "Trebuchet MS", Helvetica, sans-serif',
      "body"  : '"Open Sans", Helvetica, Verdana, sans-serif'
    ),
    "weights": (
      "500": 500
    )
  ),

  "colors": (
    "purples": (
      hsl(298,100%,31%)
      hsl(298,92%,43%)
    ),
    "grays": (
      hsl(202,19%,19%),
      hsl(202,19%,30%),
      hsl(202,2%,95%),
      hsl(202,2%,99%)
    )
  ),

  "assets": (
    "logo": url("/assets/ui/logo.svg"),
    "icon": (
      "new-window" : '\29C9',
      "plus"       : '+',
      "minus"      : '-'
    )
  )
);

$numbers_1000:    1000;
$numbers_122:     122;
$numbers_100:     100;
$numbers_4:       4;
$numbers_2:       2;
$numbers_1:       1;
$numbers_0:       0;
$numbers_0-75:    0.75;
$numbers_0-5:     0.5;
$numbers_0-25:    0.25;
$numbers_0-1:     0.1;
$numbers_neg_0-5: -0.5;
$numbers_neg_2:   -2;
$numbers_neg_999: -999;

:root {
  /**
   * Arguably we have traded the syntax of CSS combined with Sass for just
   * the syntax of Sass, which doesn't save on file size and increases the
   * complexity and learning curve.
   * 
   * In theory, this easier to read to a newer developer; however, the same
   * newer developer would need to have knwoledge of Sass (at least Mixins and
   * functions) along with at least a passing knowledge our implementation
   * details.
   * 
   * That's one reason I decided to be a bit verbose in naming the functions
   * and mixin - as they are not rendered, being verbose does not hurt file
   * size.
   * 
   * At this point in abstraction, the question of who this document for is
   * raised - someone potentially new to the system and needing to get up to 
   * speed quickly; or, someone who knows CSS and maybe doesn't want to learn
   * much about Sass (sass_2.scss)?
   * 
   * A question they may get raised in the mind of someone looking at the code
   * later may be: How much is this code actually doing something?
   * 
   * And, looking at the implementation, finding out that it's not really a lot.
   */
  @include variable(head-font, (fonts, families, header));
  @include variable(body-font, (fonts, families, body));
  @include variable(bold-font, (fonts, weights, "500")); // remove quotes - ??

  @include variable(ef-key, (colors, purples, 2));

  @include variable(ef-gray-darkest, (colors, grays, 1));
  @include variable(ef-gray-darker, (colors, grays, 2));
  @include variable(ef-gray-lightest, (colors, grays, 4));

  @include variable(logo, (assets, logo));

  @include variable(icon-new-window, (assets, icon, new-window));
  @include variable(icon-plus, (assets, icon, plus));
  @include variable(icon-minus, (assets, icon, minus));

  @include variable(3xl-font, font-size(3.2, 4));
  @include variable(m-font, font-size(1.6, 1.8));
  @include variable(xs-font, font-size(1, 1.4));

  /**
   * The rest of these involve literal number values and raises the question
   * of how to do that.
   */
  --l-line-height: calc(var(--3xl-font) * 1);
  --m-line-height: calc(var(--m-font) * 1.62);

  --spacer-xl: #{$numbers_4}rem;
  --spacer-l: #{$numbers_2}rem;
  --spacer-m: #{$numbers_1}rem;
  --spacer-s: #{$numbers_0-75}rem;
  --spacer-xs: #{$numbers_0-5}rem;
  --spacer-2xs: #{$numbers_0-25}rem;
  --spacer-3xs: #{$numbers_0-1}rem;

  --spacer-none: #{$numbers_0};
  --spacer-icon-lift: #{$numbers_neg_0-5}rem;
  --spacer-off-screen: #{$numbers_neg_999}em;

  --px-1000: #{$numbers_1000}px;
  --px-neg-2: #{$numbers_neg_2}px;

  --fr-1: #{$numbers_1}fr;

  --100-percent: #{$numbers_100}%;

  --scale-proportional: var(--100-percent) var(--auto);

  --transition-color: color #{$numbers_0-25}s;
  --transition-bg-color: background-color #{$numbers_0-25}s;

  --margin-centered: var(--spacer-none) var(--auto);
  --true-center: var(--center) var(--center);

  --logo-height: #{$numbers_122}px;

  --grid-columns-2: "#{$numbers_1} #{$numbers_2}";

  /**
   * Battling with keeping these here. Believe the rule of using only var() in
   * selector definitions is most benefiicial, maybe a looping function keywords.
   * 
   * I don't like the amount of typing to define to then reference using var(),
   * 
   * I do apprecaite the meta view I can get from seeing them here.
   */
  --none: none;
  --transparent: transparent;
  --collapse: collapse;
  --pointer: pointer;
  --center: center;
  --left: left;
  --solid: solid;
  --auto: auto;
  --block: block;
  --inline-block: inline-block;
  --grid: grid;
  --absolute: absolute;
  --relative: relative;
  --no-repeat: no-repeat;
}

body {
  min-height: 0vw; // FIX: Safari 14 using vw with min, max, and clamp
  max-width: var(--px-1000);

  margin: var(--margin-centered);

  background: var(--ef-gray-lightest);

  color: var(--ef-gray-darkest);
  font-family: var(--body-font);
  font-size: var(--m-font);
  line-height: var(--m-line-height);
}

a, button {
  font-weight: var(--bold-font);
}

button {
  background: var(--ef-key);
  border: var(--none);
  color: var(--ef-gray-lightest);
  transition: var(--transition-bg-color);
  font-size: var(--m-font);

  &:hover {
    background: var(--ef-gray-darker);
  }
}

a {
  text-decoration: var(--none);
  font-weight: var(--bold-font);
  color: var(--ef-key);

  transition: var(--transition-color);
  &:hover {
    color: var(--ef-gray-darker);
  }
}

button:hover, a:hover {
  cursor: var(--pointer);
}

header > nav > a {
  display: var(--inline-block);

  margin: var(--spacer-xl) var(--margin-auto);
  padding: var(--spacer-none);

  width: var(--100-percent);
  height: var(--logo-height);

  background-image: var(--logo);
  background-position: var(--true-center);
  background-repeat: var(--no-repeat);

  &:hover {
    filter: invert(26%) sepia(98%) saturate(4247%) hue-rotate(286deg) brightness(87%) contrast(122%);
  }

  & > span {
    position: var(--absolute);
    left: var(--spacer-off-screen);
  }
}

body > #main-nav-form {
  text-align: var(--center);

  & label {
    display: var(--inline-block);
    margin-right: var(--spacer-m);
  }

  & select {
    appearance: var(--none);
    border-radius: var(--spacer-none);
    border: var(--none);
    border-bottom: var(--spacer-3xs) var(--solid) var(--ef-key);
    background: var(--transparent);
    color: var(--ef-key);

    font-size: var(--m-font);
  }

  & button {
    position: var(--relative);
    top: var(--spacer-2xs);

    margin: var(--spacer-none) var(--spacer-m);
    padding: var(--spacer-2xs) var(--spacer-m);
    border-radius: var(--spacer-xs);
  }
}

h1, h2, h3, h4, h5, h6 {
  margin-top: var(--spacer-xl);
  font-family: var(--head-font);
  font-size: var(--3xl-font);
  line-height: var(--l-line-height);
}

h3, h4, h5, h6 {
  text-align: var(--center);
}

main {
  margin: var(--spacer-none) var(--spacer-xs);
  padding-top: var(--spacer-xl);

  & .heading-permalink {
    display: var(--inline-block);
    margin-right: var(--spacer-2xs);
  }

  table {
    border-collapse: var(--collapse);
    border: var(--spacer-3xs) var(--solid) var(--ef-gray-darker);
    width: var(--100-percent); // will need to be changed

    th, td {
      padding: var(--spacer-s);
      border-bottom: var(--spacer-3xs) var(--solid) var(--ef-gray-darker);
    }
  }
}

nav.next-previous {
  margin: var(--spacer-xl) var(--auto) var(--spacer-l);
  @media screen and (min-width: 720px) { // CSS var here doesn't seem to work
      display: var(--grid);
      grid-gap: var(--spacer-xl);
      grid-template-columns: var(--fr-1) var(--fr-1);
      grid-template-areas: var(--grid-columns-2);
  }

  & > a {
    display: var(--block);
    margin: var(--spacer-m);
    padding: var(--spacer-xs) var(--spacer-m);
    border: var(--spacer-2xs) var(--solid) var(--ef-key);
    border-radius: var(--spacer-xs);

    text-align: var(--center);

    transition: var(--transition-color), var(--transition-bg-color);

    &:hover {
      color: var(--ef-gray-lightest);
      background-color: var(--ef-key);
    }
  }
}

[is="accordion"] {
  margin: var(--spacer-none);
  padding: var(--spacer-none);

  &:first-of-type {
    margin-top: var(--spacer-m);
  }

  & > button {
    margin-top: var(--spacer-m);
    margin-bottom: var(--spacer-none);
    padding: var(--spacer-m);

    width: var(--100-percent);

    font-size: var(--spacer-l);
    text-align: var(--left);

    &:before {
      margin-right: var(--spacer-xs);
      content: var(--icon-plus);
      font-size: var(--xl-font);
    }

    &[aria-expanded="true"]:before {
      content: var(--icon-minus);
    }
  }

  & + div[aria-hidden="true"] {
    display: var(--none);
  }

  & + div[aria-hidden="false"] {
    padding: var(--spacer-m);
    margin-top: var(--px-neg-2);
    border: var(--spacer-2xs) var(--solid) var(--ef-key);

    & > ul:first-of-type {
      margin-top: var(--spacer-none);
    }
  }
}

footer {
  & > p {
    text-align: var(--center);
    font-size: var(--xs-font);
  }
}

[rel~="noreferrer"]:after {
  content: var(--icon-new-window);
  display: var(--inline-block);
  margin-left: var(--spacer-2xs);
  position: var(--relative);
  top: var(--spacer-icon-lift);
}
